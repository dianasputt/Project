# -*- coding: utf-8 -*-
"""content-based.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jX01FRnR0dKY1AXUB1qBu8fu67aM-8CX
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.preprocessing import StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

# Membaca dataset
dataset = pd.read_excel("tourism_with_id (1).xlsx")

# Menentukan variabel input dan output
features = dataset[['Location', 'Price', 'Rating']]
output = dataset[['Rating']]

# Normalisasi fitur numerik
numeric_features = ['Price', 'Rating']
numeric_transformer = StandardScaler()

# Preprocessing fitur kategori
categorical_features = ['Location']
categorical_transformer = OneHotEncoder()

# Menggabungkan transformer numerik dan kategori
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)])

# Melakukan preprocessing pada fitur-fitur
processed_features = preprocessor.fit_transform(features).toarray()

# Membangun model dengan TensorFlow
model = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(len(numeric_features) + len(dataset['Location'].unique()),)),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(1)  # Satu output untuk peringkat
])

# Kompilasi model
model.compile(optimizer='adam', loss='mse')  # Mean Squared Error untuk peringkat

# Melatih model
model.fit(x=processed_features, y=output, epochs=50, batch_size=32, validation_split=0.1)

# Mengambil input dari user
input_places = input("Masukkan nama tempat wisata (pisahkan dengan koma): ")
input_places = [place.strip() for place in input_places.split(",")]

# Mendapatkan indeks tempat wisata yang sesuai dengan input user
target_indices = []
for place in input_places:
    place_indices = dataset[dataset["Place_Name"] == place].index
    if len(place_indices) > 0:
        target_indices.extend(place_indices)

target_indices = list(set(target_indices))  # Menghapus duplikat indeks
target_places = dataset.loc[target_indices]

# Mengambil fitur-fitur konten dari tempat-tempat yang ditentukan
target_features = target_places[['Location', 'Price', 'Rating']]

# Melakukan preprocessing pada fitur-fitur
processed_target_features = preprocessor.transform(target_features).toarray()

# Memprediksi peringkat tempat-tempat yang ditentukan
predicted_ratings = model.predict(processed_target_features)

# Mengurutkan tempat-tempat berdasarkan peringkat yang diprediksi
sorted_indices = np.argsort(-predicted_ratings.flatten())  # Mengurutkan peringkat secara menurun
sorted_places = target_places.iloc[sorted_indices]

# Menghapus duplikasi dari hasil prediksi
sorted_places = sorted_places.drop_duplicates()

# Menampilkan rekomendasi tempat wisata berdasarkan peringkat yang diprediksi
print("Rekomendasi Tempat Wisata:")
for index, place in sorted_places.iterrows():
    print(f"Nama Tempat: {place['Place_Name']}")
    print(f"Lokasi: {place['Location']}")
    print(f"Estimasi Harga: {place['Price']}")
    print(f"Rating: {place['Rating']}")
    print(f"Jam buka: {place['Time_Minutes']}")
    print("---")

